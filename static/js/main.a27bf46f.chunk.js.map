{"version":3,"sources":["share/muti-step-tab/step-panel.tsx","share/muti-step-tab/muti-step-tab.tsx","pages/select-meal-form/select-meal-form.common.ts","share/utils.tsx","pages/select-meal-form/step-component1.tsx","share/form.tsx","pages/select-meal-form/step-component2.tsx","pages/select-meal-form/step-component3.tsx","pages/select-meal-form/step-component4.tsx","pages/select-meal-form/select-meal-form.tsx","App.tsx","reportWebVitals.ts","index.tsx","pages/select-meal-form/select-meal-form.module.scss","share/muti-step-tab/index.module.scss"],"names":["StepPanel","props","value","content","selected","className","id","MutiStepTab","tabBars","tabPanels","canSwitchTab","nextHandleRef","onTabChange","disableSwitch","useState","selectedIndex","setSelectedIndex","useEffect","useImperativeHandle","next","previous","getCurrentIndex","Tabs","style","tabBar","onChange","event","map","d","i","Tab","label","disabled","disableRipple","node","MealFormField","customControlValidate","form","keyList","reduce","acc","key","control","get","updateState","onlySelf","isValid","unionListField","list","field","item","curValue","Array","isArray","union","getMealList","mealData","StepComponent1","formRef","handleFormChange","current","InputLabel","textAlign","FormControl","fullWidth","error","meal","Select","labelId","target","index","MenuItem","require","FormHelperText","TextField","type","peopleNum","min","max","NgValidators","length","num","AbstractControl","validators","_parent","_validators","_value","_errors","_isValid","this","option","_synchronizeParentValue","parent","childAllValid","NgFormGroup","NgFormArray","_forEachChild","c","executeCurrentValidators","validatorList","concat","_refreshValue","err","fn","childrenIsValid","NgFormControl","controlMap","parseValueFormControls","controls","setParent","ctl","console","callBack","Object","values","forEach","formMap","prototype","toString","call","entries","controlList","push","splice","StepComponent2","handleRestaurantChange","restaurant","restaurantList","selectedMeal","filter","availableMeals","includes","getRestaurantList","selctedRestaurant","setValue","renderSelectBox","createDish","dish","dishValidator","totalNum","lackOfDish","StepComponent3","selectedRestaurant","selectedDishValue","dishList","dishFormArray","totalDishOptionList","removeValidator","addValidators","bind","undefined","renderSelectInput","prevSelectedDishNameList","slice","currentDishOptionList","name","e","handleDeleteDish","removeControl","threeColumn","caption","totalDishOptionNameList","every","Button","deleteBtn","size","onClick","variant","color","renderDishList","addDishBtnWrap","newDishControl","addControl","StepComponent4","formValue","reviewContainer","reviewColumn","createForm","ComponentWrap","rn","customValidator","_reactNode","_customValidator","useComponentWrap","cmp","reactNode","React","createElement","customSubFormValidator1","customSubFormValidator2","customSubFormValidator3","SelectMealForm","setMealData","setFormRef","currentStepIndex","setCurrentStepIndex","from","axios","pipe","res","data","dishes","catchError","of","subscribe","newFormRef","clone","newForm","componentWrap1","componentWrap2","componentWrap3","componentWrap4","getNode","componentWrapList","validateSubForm","updateValidity","multiStepNextHandleRef","useRef","handleNextStep","handlePreviousStep","handleTabChange","useCallback","handleSubmit","log","selectMealFormContainer","actionBtn","previousAndNextWrap","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.a27bf46f.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function StepPanel(props: {\n  key?: string;\n  selected: string | number;\n  value: string | number;\n  content: React.ReactNode;\n}) {\n  const {value, content, selected} = props;\n  return (\n    value === selected\n      ? <div className={'panelContainer'} id={'StepPanel' + selected}>\n        {content}\n      </div>\n      : null\n  );\n}\n","import React, {ReactNode, RefObject, useEffect, useImperativeHandle, useState} from 'react';\nimport style from './index.module.scss'\nimport './index.module.scss'\nimport {Tab, Tabs} from \"@mui/material\";\nimport StepPanel from \"./step-panel\";\n\nexport type StepTabPanel = ReactNode | ((index: number) => ReactNode);\n\nexport default function MutiStepTab(props: {\n  tabBars: ReactNode[];\n  // tabPanels支持传入生成函数，提供 tab index\n  tabPanels?: StepTabPanel[];\n  nextHandleRef?: RefObject<any>;\n  disableSwitch?: boolean;\n  canSwitchTab?: (index: number) => boolean;\n  onTabChange?: (index: number) => void;\n}) {\n  const {\n    tabBars,\n    tabPanels = [],\n    canSwitchTab,\n    nextHandleRef,\n    onTabChange,\n    disableSwitch = false\n  } = props;\n\n  const [selectedIndex, setSelectedIndex] = useState(0);\n\n  //  监听 selectedIndex 变化\n  useEffect(() => {\n    //  调用父组件 onTabChange 方法\n    if (onTabChange) {\n      onTabChange(selectedIndex);\n    }\n  }, [selectedIndex, onTabChange]);\n\n\n  function handleTabChange(event: React.SyntheticEvent, value: any) {\n    if (disableSwitch) {\n      return;\n    }\n    if (canSwitchTab && !canSwitchTab(value)) {\n      return;\n    }\n    setSelectedIndex(value);\n  }\n\n  //  暴露 next 方法\n  useImperativeHandle(nextHandleRef, () => ({\n    next: () => {\n      setSelectedIndex(selectedIndex + 1);\n    },\n    previous: () => {\n      setSelectedIndex(selectedIndex - 1);\n    },\n    getCurrentIndex: () => {\n      return selectedIndex;\n    }\n  }))\n\n  const renderTabPanels = (tabPanes: StepTabPanel[]) => {\n\n    const rnList = tabPanels.map((d, i) => {\n\n        const node: ReactNode = typeof d === 'function' ? d(i) : d;\n        return <StepPanel key={i + ''}\n                          content={node}\n                          value={i}\n                          selected={selectedIndex}\n        />;\n      }\n    )\n\n    return rnList;\n  }\n\n  return (\n    <div className={'mutiStepTab-container'}>\n      <Tabs className={style.tabBar}\n            value={selectedIndex}\n            onChange={handleTabChange}\n      >\n        {tabBars.map((d, i) =>\n          <Tab key={i} label={d} value={i}\n               disabled={disableSwitch}\n               disableRipple={disableSwitch}\n          />\n        )}\n      </Tabs>\n      <div className={'mutiStepTab-panel-wrap'}>\n        {renderTabPanels(tabPanels)}\n      </div>\n\n    </div>\n\n  );\n}\n\n","import {NgFormGroup} from \"../../share/form\";\n\n\nexport interface Meal {\n  availableMeals: string[];\n  id: string | number;\n  name: string;\n  restaurant: string;\n}\n\nexport enum MealFormField {\n  meal = 'meal',\n  peopleNum = 'peopleNum',\n  restaurant = 'restaurant',\n  dishList = 'dishList',\n}\n\nexport interface FormRef{\n  current: NgFormGroup;\n}\n\nexport type CustomSubFormValidator = (form: NgFormGroup) => boolean;\n\n// 子组件自定义验证指定 formControl\nexport function customControlValidate(\n  form: NgFormGroup,\n  keyList: MealFormField[],\n): boolean {\n  const isValid = keyList.reduce(\n    (acc, key) => {\n      const control = form.get(key);\n      //  注意： 此处调用子组件校验，不触发父级状态校验\n      control.updateState({onlySelf: false});\n      return acc && control.isValid;\n    }, true);\n\n  return isValid;\n}\n","import {union} from 'lodash-es';\n\n//  针对对象数组中的某一个字段的值，取并集\nexport function unionListField<T, K extends keyof T>(\n  list: T[],\n  field: K,\n): T[K] | T[K][] {\n  return list.reduce((acc, item) => {\n    const curValue = item[field];\n    // 暂时只支持数组\n    if (!Array.isArray(curValue)) {\n      return curValue == null ? acc : union(acc, [curValue]);\n    }\n    return union(acc, curValue);\n  }, [] as T[K][]);\n}\n","import React from \"react\";\nimport {FormControl, FormHelperText, InputLabel, MenuItem, Select, SelectChangeEvent, TextField} from \"@mui/material\";\nimport {unionListField} from \"../../share/utils\";\nimport {FormRef, Meal, MealFormField} from \"./select-meal-form.common\";\n\n\nfunction getMealList(mealData: Meal[]): string[] {\n  return unionListField(mealData, 'availableMeals') as string[];\n}\n\nexport default function StepComponent1(\n  props: {\n    mealData: Meal[];\n    handleFormChange: (key: MealFormField, value: any) => void;\n    formRef: FormRef;\n  },\n) {\n  const {\n    mealData,\n    formRef,\n    handleFormChange,\n  } = props;\n  const form = formRef.current;\n\n  //  选中 meal\n  const handleMealChange = (event: SelectChangeEvent) => {\n    handleFormChange(MealFormField.meal, event.target.value);\n  };\n\n  //  人数变化\n  const handlePeopleNumChange = (event: any) => {\n    handleFormChange(MealFormField.peopleNum, event.target.value);\n  };\n\n  return (\n    <div>\n      <InputLabel style={{textAlign: 'left'}}>\n        Please Select a meal:\n      </InputLabel>\n      <FormControl fullWidth error={!form.get(MealFormField.meal).isValid}>\n        <Select\n          labelId=\"select-meal-label\"\n          id=\"select-meal\"\n          value={form.get(MealFormField.meal).value}\n          onChange={handleMealChange}\n        >\n          {(\n            getMealList(mealData).map((d, index) =>\n              <MenuItem key={'key' + index} value={d}>{d}</MenuItem>)\n          )}\n        </Select>\n        {(\n          form.get(MealFormField.meal).error?.require\n            ? <FormHelperText>Must Select Meal</FormHelperText>\n            : null\n        )}\n\n      </FormControl>\n\n\n      {/* 输入人数 */}\n      <InputLabel style={{textAlign: 'left'}}>\n        Please Enter Number Of People:\n      </InputLabel>\n      <TextField\n        fullWidth\n        id=\"standard-number\"\n        type=\"number\"\n        value={form.get(MealFormField.peopleNum).value}\n        onChange={handlePeopleNumChange}\n        error={!form.get(MealFormField.peopleNum).isValid}\n      />\n      {(\n        form.get(MealFormField.peopleNum).error?.min\n          ? <FormHelperText className={'Mui-error'}>\n            Number must be greater than or equal to 1\n          </FormHelperText>\n          : null\n      )}\n      {(\n        form.get(MealFormField.peopleNum).error?.max\n          ? <FormHelperText className={'Mui-error'}>\n            Number must be less than or equal to 10\n          </FormHelperText>\n          : null\n      )}\n    </div>\n  );\n}\n","\ninterface ValidatorError {\n  [s: string]: boolean;\n}\n\n//  返回 null 说明验证通过\nexport  type FormValidator = (control: AbstractControl) => ValidatorError | null;\n\nexport class NgValidators {\n  static require(control: AbstractControl): ValidatorError | null {\n    const value = control.value;\n    return value == null || value.length === 0 ? {require: true} : null;\n  }\n\n  static min(num: number): FormValidator {\n    return (control: AbstractControl) => {\n      const value = control.value;\n      return value < num ? {min: true} : null;\n    }\n  }\n\n  static max(num: number): FormValidator {\n    return (control: AbstractControl) => {\n      const value = control.value;\n      return value > num ? {max: true} : null;\n    }\n  }\n}\n\n\ninterface UpdateStateOption {\n  onlySelf?: boolean;\n}\n\n//  由于 react 生态中暂未找到较合适的表单工具\n//  简易实现 angular 表单\nexport abstract class AbstractControl {\n  protected _parent: AbstractControl | null = null;\n\n  protected _validators: FormValidator[] = [];\n\n  protected _value: any;\n  get value(): any {\n    return this._value;\n  };\n\n  protected _errors: ValidatorError | null = null;\n\n  get error() {\n    return this._errors;\n  }\n\n  protected _isValid = true;\n  get isValid() {\n    return this._isValid;\n  }\n\n  constructor(value: any, validators: FormValidator[]) {\n    this._value = value;\n    this._validators = validators\n  }\n\n  // 设置表单值\n  setValue(value: any, option?: { onlySelf: boolean }): void {\n    this._value = value;\n    this.updateState(option);\n\n    this._synchronizeParentValue();\n  }\n\n  setParent(parent: AbstractControl): void {\n    this._parent = parent;\n  }\n\n\n  /**\n   * 检查当前表单项的状态\n   * 注意：仅运行当前所在的 AbstractControl 校验器（并不触发子项的校验器）\n   * @param option\n   *            onlySelf: 仅在当前control运行校验，不通知父级 (默认 false)\n   *\n   */\n  updateState(option?: UpdateStateOption): void {\n\n    let childAllValid = true;\n    //  如果为 formGroup、formArray，需要递归向下检查并同步子项状态\n    if ((this instanceof NgFormGroup || this instanceof NgFormArray)) {\n      this._forEachChild((c) => {\n        childAllValid = childAllValid && c.isValid;\n      });\n    }\n\n    this._isValid = childAllValid\n      ? AbstractControl.executeCurrentValidators(this)\n      : false;\n\n    //  如果设置 onlySelf 为 true, 不触发父级更新\n    if (option?.onlySelf !== true) {\n      this._parent?.updateState();\n    }\n\n  }\n\n\n  removeValidator() {\n    this._validators = [];\n  }\n\n  addValidators(validatorList: FormValidator[]) {\n    this._validators = this._validators.concat(validatorList);\n  }\n\n  //  同步value\n  protected _synchronizeParentValue() {\n    let parent = this._parent;\n    while (parent != null) {\n      if (parent instanceof NgFormGroup || parent instanceof NgFormArray) {\n        parent._refreshValue();\n      }\n      parent = parent._parent;\n    }\n  }\n\n  //  在当前表单项执行校验\n  //  针对 formGroup 和 FormArray，还需要校验子项\n  static executeCurrentValidators(control: AbstractControl): boolean {\n    //  验证当前所在的验证器\n    for (let fn of control._validators) {\n      const err = fn(control);\n\n      if (err != null) {\n        control._errors = err;\n        control._isValid = false;\n        return false;\n      }\n    }\n\n    //  如果为 formGroup 和 FormArray 还需要递归校验子项验证器\n    let childrenIsValid = true;\n    if (control instanceof NgFormGroup || control instanceof NgFormArray) {\n      control._forEachChild((c) => {\n        childrenIsValid = childrenIsValid && AbstractControl.executeCurrentValidators(c);\n      });\n    }\n\n    //  校验全部通过\n    if (childrenIsValid) {\n      control._errors = null;\n      control._isValid = true;\n\n      return true;\n    } else {\n      //  这里不能为 _errors 属性赋值，因为 _errors 只显示当前所在验证器的错误\n      control._isValid = false;\n      return false;\n    }\n  }\n\n}\n\n//  FormControl\nexport class NgFormControl extends AbstractControl {\n  constructor(value: any, validators: FormValidator[] = []) {\n    super(value, validators)\n  }\n\n}\n\n\n//  FormGroup\nexport class NgFormGroup<T = any> extends AbstractControl {\n  controls: Record<keyof T, AbstractControl> = {} as any;\n\n  constructor(controlMap: Record<keyof T, AbstractControl>, validators: FormValidator[] = []) {\n    super(NgFormGroup.parseValueFormControls(controlMap), validators);\n    this.controls = controlMap;\n\n    //   调用每个子项的 setParent 方法设置 parent\n    this._forEachChild(d => d.setParent(this));\n  }\n\n  // 设置表单值\n  setValue(\n    controlMap: Record<keyof T, AbstractControl>,\n    option?: { onlySelf: boolean }\n  ): void {\n    this._value = NgFormGroup.parseValueFormControls(controlMap);\n    this.controls = controlMap;\n    this._forEachChild(d => d.setParent(this));\n\n    this.updateState(option);\n    this._synchronizeParentValue();\n  }\n\n  //  获取指定的 formControl\n  get(key: keyof T): AbstractControl {\n    const ctl = this.controls[key];\n    if (ctl == null) {\n      console.error('formGroup 中没有对应的表单项');\n    }\n    return ctl;\n  }\n\n  //  实现遍历子项的方法\n  _forEachChild(callBack: (control: AbstractControl) => void): void {\n    Object.values<AbstractControl>(this.controls).forEach((d) => callBack(d));\n  };\n\n  _refreshValue() {\n    this._value = NgFormGroup.parseValueFormControls(this.controls);\n  }\n\n  private static parseValueFormControls(\n    formMap: Record<string, AbstractControl>\n  ): Record<string, any> {\n    if (Object.prototype.toString.call(formMap) !== '[object Object]') {\n      console.error('ngFormGroup 只支持对象参数')\n      return {};\n    }\n\n    return Object.entries(formMap).reduce(\n      (acc, [key, control]) => {\n        acc[key] = control.value;\n        return acc;\n      }, {} as Record<string, any>)\n  }\n}\n\n\n//  FormArray\nexport class NgFormArray<T extends AbstractControl = any> extends AbstractControl {\n  controls: Array<T> = [];\n\n  constructor(controlList: T[], validators: FormValidator[] = []) {\n    super(NgFormArray.parseValueFormControls(controlList), validators);\n\n    this.controls = controlList;\n\n    //  设置子项的 _parent属性\n    this._forEachChild(d => d.setParent(this));\n  }\n\n  // 设置表单值\n  setValue(\n    controlList: T[],\n    option?: { onlySelf: boolean }\n  ): void {\n    this._value = NgFormArray.parseValueFormControls(controlList);\n    this.controls = controlList;\n    this._forEachChild(d => d.setParent(this));\n\n    this.updateState(option);\n    this._synchronizeParentValue();\n  }\n\n  //  实现遍历子项的方法\n  _forEachChild(callBack: (control: AbstractControl) => void): void {\n    this.controls.forEach(d => callBack(d));\n  };\n\n  _refreshValue() {\n    this._value = NgFormArray.parseValueFormControls(this.controls);\n  }\n\n  addControl(item: T) {\n    this.controls.push(item);\n    item.setParent(this);\n    this._value = NgFormArray.parseValueFormControls(this.controls);\n  }\n\n  removeControl(index: number) {\n    this.controls.splice(index, 1);\n    this._value = NgFormArray.parseValueFormControls(this.controls);\n  }\n\n  //  解析 AbstractControl 列表，获取对应的 value\n  private static parseValueFormControls(controlList: AbstractControl[]): any[] {\n    return controlList.map(d => d.value);\n  }\n}\n","import React from 'react';\nimport {FormRef, Meal, MealFormField} from \"./select-meal-form.common\";\nimport {NgFormGroup} from \"../../share/form\";\nimport {FormControl, FormHelperText, InputLabel, MenuItem, Select, SelectChangeEvent} from \"@mui/material\";\nimport {unionListField} from \"../../share/utils\";\n\n\n// 从数据中过滤出 restaurant 数据\nfunction getRestaurantList(mealData: Meal[], form: NgFormGroup): string[] {\n  const selectedMeal = form.get(MealFormField.meal).value;\n  const availableList = mealData.filter(d => d.availableMeals.includes(selectedMeal));\n  return unionListField(availableList, 'restaurant') as string[];\n}\n\nexport default function StepComponent2(\n  props: {\n    mealData: Meal[];\n    handleFormChange: (key: MealFormField, value: any) => void;\n    formRef: FormRef;\n  },\n) {\n  const {\n    mealData,\n    formRef,\n    handleFormChange,\n  } = props;\n\n  const form = formRef.current;\n\n  const handleRestaurantChange = (event: SelectChangeEvent) => {\n    handleFormChange(MealFormField.restaurant, event.target.value);\n  }\n\n\n  const renderSelectBox = () => {\n    const restaurantList = getRestaurantList(mealData, form);\n    const selctedRestaurant = form.get(MealFormField.restaurant).value;\n\n    if (!restaurantList.includes(selctedRestaurant)){\n      form.get(MealFormField.restaurant).setValue('');\n    }\n\n    return (\n      <Select\n        labelId=\"select-meal-label\"\n        id=\"select-meal\"\n        value={form.get(MealFormField.restaurant).value}\n        onChange={handleRestaurantChange}\n      >\n        {(\n          restaurantList.map((d, index) =>\n            <MenuItem key={'key' + index} value={d}>{d}</MenuItem>)\n        )}\n      </Select>\n    )\n  }\n\n  return (\n    <div>\n      <InputLabel style={{textAlign: 'left'}}>\n        Please Select a Restaurant:\n      </InputLabel>\n      <FormControl fullWidth error={!form.get(MealFormField.restaurant).isValid}>\n        {/* 渲染选择框 */}\n        {renderSelectBox()}\n\n\n        {/* 渲染提示信息 */}\n        {(\n          form.get(MealFormField.restaurant).error?.require\n            ? <FormHelperText>Must Select Restaurant</FormHelperText>\n            : null\n        )}\n\n      </FormControl>\n    </div>\n  );\n}\n","import {FormRef, Meal, MealFormField} from \"./select-meal-form.common\";\nimport {AbstractControl, NgFormArray, NgFormControl, NgFormGroup, NgValidators} from \"../../share/form\";\nimport React from \"react\";\nimport {\n  Button,\n  FormControl,\n  FormHelperText,\n  MenuItem,\n  Select,\n  SelectChangeEvent,\n  TextField\n} from \"@mui/material\";\nimport style from './select-meal-form.module.scss';\n\nexport interface Dish {\n  dish: string;\n  num: number;\n}\n\n//  创建一个新的默认 dish 表单项\nexport function createDish(): NgFormGroup<Dish> {\n  return new NgFormGroup({\n    dish: new NgFormControl('', [NgValidators.require]),\n    num: new NgFormControl('1'),\n  })\n}\n\n//  自定义验证器\nfunction dishValidator(form: NgFormGroup, control: AbstractControl) {\n  const peopleNum = form.get(MealFormField.peopleNum).value;\n  let totalNum = 0;\n  (control as NgFormArray)._forEachChild((d) => {\n    totalNum += +(d as NgFormGroup<Dish>).get('num').value;\n  })\n  return peopleNum <= totalNum ? null : {lackOfDish: true};\n}\n\nexport default function StepComponent3(\n  props: {\n    mealData: Meal[];\n    handleFormChange: (key: MealFormField, value: any) => void;\n    formRef: FormRef;\n  },\n) {\n  const {\n    mealData,\n    formRef,\n    handleFormChange,\n  } = props;\n  const form = formRef.current;\n\n  //\n  const selectedMeal = form.get(MealFormField.meal).value;\n  const selectedRestaurant = form.get(MealFormField.restaurant).value;\n  const selectedDishValue = form.get(MealFormField.dishList).value as Dish[];\n  //  此组件中的验证器是动态（依赖于前两步的值）,故需要动态添加验证器\n  const dishFormArray = form.get(MealFormField.dishList) as NgFormArray<NgFormGroup<Dish>>;\n  const totalDishOptionList = mealData.filter(d => (\n    d.restaurant === selectedRestaurant\n    && d.availableMeals.includes(selectedMeal))\n  );\n\n  // dishFormArray.updateState();\n  if (dishFormArray.isValid) {\n    dishFormArray.removeValidator();\n    dishFormArray.addValidators([dishValidator.bind(undefined, form)]);\n  }\n\n\n  //  选择 dish\n  function handleSelectChange(index: number, event: SelectChangeEvent) {\n    const currentDishControl = dishFormArray.controls[index];\n    currentDishControl.get('dish').setValue(event.target.value);\n    handleFormChange(MealFormField.dishList, null);\n  }\n\n  //  选择人数\n  function handleServingChange(index: number, event: SelectChangeEvent) {\n    //  不能小于1\n    if (+event.target.value < 1) {\n      return;\n    }\n    const currentDishControl = dishFormArray.controls[index];\n    currentDishControl.get('num').setValue(event.target.value);\n    handleFormChange(MealFormField.dishList, null);\n  }\n\n\n  const renderSelectInput = (item: NgFormGroup<Dish>, i: number) => {\n    const prevSelectedDishNameList = selectedDishValue.slice(0, i).map(d => d.dish);\n\n    //  剔除前面选中的表单\n    const currentDishOptionList = totalDishOptionList.filter(d => !prevSelectedDishNameList.includes(d.name));\n\n    return (<Select\n      labelId={'select-dish-label' + i}\n      id={'select-dish' + i}\n      value={item.get('dish').value}\n      onChange={(e) => {\n        handleSelectChange(i, e)\n      }}\n    >\n      {(\n        currentDishOptionList.map(d => (\n            <MenuItem key={d.name} value={d.name}>{d.name}</MenuItem>\n          )\n        )\n      )}\n    </Select>)\n  }\n\n  const renderDishList = () => {\n    //  检查当前表单值是否合法（由于关联之前的操作，可能由于修改之前的内容造成当前值不合法）\n    const totalDishOptionNameList = totalDishOptionList.map(d => d.name);\n    //  当前表单所有值都必须在可选范围内\n    const isValid = selectedDishValue.every(d => (\n      d.dish === '' ? true : totalDishOptionNameList.includes(d.dish)\n    ));\n    if (!isValid) {\n      //  不合法则重置 formArray 的值\n      dishFormArray.setValue([createDish()]);\n    }\n\n    return dishFormArray.controls\n      .map((item, i) => {\n        return (\n          <div key={i} className={style.threeColumn}>\n            <div>\n              <FormControl fullWidth\n                           error={!item.get('dish').isValid}>\n                {/* 渲染 select 选择框 */}\n                {renderSelectInput(item, i)}\n\n                {/* 提示信息 */}\n                {(\n                  item.get('dish').error?.require\n                    ? <FormHelperText>Must Select a Dish</FormHelperText>\n                    : null\n                )}\n              </FormControl>\n            </div>\n            <div>\n              <TextField\n                fullWidth\n                id=\"standard-number\"\n                type=\"number\"\n                value={item.get('num').value}\n                error={!item.get('num').isValid}\n                onChange={(e: any) => {\n                  handleServingChange(i, e);\n                }}\n              />\n            </div>\n            {/* 删除按钮*/}\n            {(\n              <Button className={style.deleteBtn} size=\"small\"\n                      onClick={() => handleDeleteDish(i)}\n                      variant=\"contained\"\n                      color=\"secondary\"\n                      disabled={selectedDishValue.length <= 1}\n              >\n                Delete\n              </Button>\n            )}\n          </div>\n        )\n      })\n  }\n\n  const addDishHandle = () => {\n    //  如果子项没有验证通过，不能添加\n    let childrenIsValid = true;\n    for (let c of dishFormArray.controls) {\n      c.updateState({onlySelf: true});\n      childrenIsValid = childrenIsValid && c.isValid;\n      if (!childrenIsValid) {\n        //  触发更新\n        handleFormChange(MealFormField.dishList, null);\n        return;\n      }\n    }\n\n    //  如果没有可选的 dish 不能添加\n    if (selectedDishValue.length === totalDishOptionList.length) {\n      return;\n    }\n\n    //  新增一行\n    const newDishControl = createDish();\n    //  希望增加新表单项之后能立即看到错误提示\n    newDishControl.updateState();\n    dishFormArray.addControl(newDishControl);\n    //  触发更新\n    handleFormChange(MealFormField.dishList, null);\n  }\n\n  const handleDeleteDish = (index: number) => {\n    //  小于一项不能删除\n    if (dishFormArray.controls.length <= 1) {\n      return;\n    }\n\n    dishFormArray.removeControl(index);\n    //  触发更新\n    handleFormChange(MealFormField.dishList, null);\n  }\n\n\n  return (\n    <div>\n      <div className={`${style.threeColumn} ${style.caption}`}>\n        <div>Please Select a Dish</div>\n        <div>Please Enter Number of Serving</div>\n      </div>\n      {/* 渲染已选的 Dish 列表 */}\n      {renderDishList()}\n\n      <FormHelperText className={'Mui-error'}>\n        {(\n          dishFormArray.controls.every(d => d.isValid) && dishFormArray.error?.lackOfDish\n            ? 'Total dish number must be greater than or equal to people number'\n            : ''\n        )}\n      </FormHelperText>\n      {/*  新增按钮  */}\n      {(\n        selectedDishValue.length === totalDishOptionList.length\n          ? null\n          : <div className={style.addDishBtnWrap}>\n            <Button variant=\"contained\"\n                    onClick={addDishHandle}\n            >\n              add Dish\n            </Button>\n          </div>\n      )}\n\n    </div>\n  );\n}\n","import React from 'react';\nimport {FormRef, MealFormField} from \"./select-meal-form.common\";\nimport style from './select-meal-form.module.scss';\nimport {Dish} from \"./step-component3\";\n\nexport default function StepComponent4(\n  props: {\n    formRef: FormRef;\n  },\n) {\n  const {formRef} = props;\n  const formValue = formRef.current.value as { [s in MealFormField]: string | Dish[] };\n\n  return (\n    <div className={style.reviewContainer}>\n      <div className={style.reviewColumn}>\n        <div>Meal:</div>\n        <div>{formValue[MealFormField.meal]}</div>\n      </div>\n      <div className={style.reviewColumn}>\n        <div>No. of People:</div>\n        <div>{formValue[MealFormField.peopleNum]}</div>\n      </div>\n      <div className={style.reviewColumn}>\n        <div>Restaurant:</div>\n        <div>{formValue[MealFormField.restaurant]}</div>\n      </div>\n      <div className={style.reviewColumn}>\n        <div>Dishes:</div>\n        <div>\n          {(\n            (formValue[MealFormField.dishList] as Dish[]).map((d, i) => (\n              <div key={i}>{d.dish} - {d.num} </div>\n            ))\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, {\n  FunctionComponent,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useRef,\n  useState\n} from 'react';\nimport style from './select-meal-form.module.scss'\nimport MutiStepTab, {StepTabPanel} from \"../../share/muti-step-tab/muti-step-tab\";\nimport axios from \"axios\";\nimport {catchError, from, map, of} from \"rxjs\";\nimport {MealFormField, Meal, customControlValidate, CustomSubFormValidator, FormRef} from \"./select-meal-form.common\";\nimport StepComponent1 from \"./step-component1\";\nimport {Button} from \"@mui/material\";\nimport {NgFormArray, NgFormControl, NgFormGroup, NgValidators} from \"../../share/form\";\nimport {clone} from \"lodash-es\";\nimport StepComponent2 from \"./step-component2\";\nimport StepComponent3, {createDish} from \"./step-component3\";\nimport StepComponent4 from \"./step-component4\";\n\n//  创建初始表单\nfunction createForm(): NgFormGroup {\n  return new NgFormGroup({\n    [MealFormField.meal]: new NgFormControl('', [NgValidators.require]),\n    [MealFormField.peopleNum]: new NgFormControl('1', [\n      NgValidators.min(1), NgValidators.max(10)\n    ]),\n    [MealFormField.restaurant]: new NgFormControl('', [NgValidators.require]),\n    [MealFormField.dishList]: new NgFormArray([createDish()]),\n  })\n}\n\n\n//  由于实现过程中发现需要获取子组件相关状态，故封装此类提供访问子组件状态的方法\n//  此类需要自定义hook： useComponentWrap 进行实例化\nclass ComponentWrap {\n  private _reactNode: ReactNode | null = null;\n  private _customValidator: CustomSubFormValidator | null;\n\n  constructor(\n    rn: ReactNode,\n    customValidator: CustomSubFormValidator | null = null,\n  ) {\n    this._reactNode = rn;\n    this._customValidator = customValidator;\n  }\n\n  getNode(): ReactNode | null {\n    return this._reactNode\n  }\n\n\n  //  调用子组件中的验证方法，返回值验证结果\n  updateValidity(form: NgFormGroup): boolean {\n    if (this._customValidator) {\n      return this._customValidator(form);\n    }\n    return true;\n  }\n\n}\n\n//  由于实现过程中发现需要获取子组件相关状态，故封装此 hook 提供访问子组件状态的方法\nfunction useComponentWrap(\n  cmp: FunctionComponent<any>,\n  props: any,\n  customValidator?: CustomSubFormValidator\n) {\n  const reactNode = React.createElement(cmp, {\n    ...props,\n  });\n  return new ComponentWrap(reactNode, customValidator)\n}\n\n//  子表单的自定义验证方法\nfunction customSubFormValidator1(form: NgFormGroup): boolean {\n  return customControlValidate(\n    form,\n    [MealFormField.meal, MealFormField.peopleNum]\n  );\n}\n\nfunction customSubFormValidator2(form: NgFormGroup): boolean {\n  return customControlValidate(\n    form,\n    [MealFormField.restaurant]\n  );\n}\n\nfunction customSubFormValidator3(form: NgFormGroup): boolean {\n  return customControlValidate(\n    form,\n    [MealFormField.dishList]\n  );\n}\n\n\nexport default function SelectMealForm() {\n\n  const [mealData, setMealData] = useState<Meal[]>([]);\n\n  //  最终的表单数据\n  //  使用 formRef 而不是直接使用 form 的原因在于触发 render 需要 clone 改变对象引用\n  //  直接克隆 formGroup 会导致表单中的子项对父级的引用丢失\n  const [formRef, setFormRef] = useState<FormRef>({current: createForm()});\n\n\n  // 当前子组件选中的 tabIndex\n  const [currentStepIndex, setCurrentStepIndex] = useState<number>(0);\n\n  //  初始化查询数据\n  useEffect(() => {\n    from(axios.get('/dishes.json')).pipe(\n      map((res: any) => res?.data?.dishes || []),\n      catchError(err => {\n        console.error('请求异常');\n        return of([]);\n      })\n    ).subscribe((res: Meal[]) => {\n      setMealData(res);\n    });\n  }, [])\n\n\n  //  表单项输入处理\n  const handleFormChange = (key: MealFormField, value: any): void => {\n    //  克隆一个新的 form\n    const newFormRef = clone(formRef);\n    const newForm = newFormRef.current;\n\n    switch (key) {\n      case MealFormField.peopleNum:\n        //  小于 0 不能设置值\n        if (value < 0) {\n          break;\n        }\n        newForm.get(key).setValue(value);\n        break;\n      case MealFormField.dishList:\n        //  第三个表单项跳过赋值（FormArray 较为特殊），已经在组件3中完成修改；\n        break;\n      default:\n        newForm.get(key).setValue(value);\n    }\n\n    setFormRef(newFormRef);\n  }\n\n  const tabBars: ReactNode[] = [\n    <div key={'step1'}>step1</div>,\n    <div key={'step2'}>step2</div>,\n    <div key={'step3'}>step3</div>,\n    <div key={'step4'}>review</div>,\n  ];\n\n  //  四个子组件，每个组件代表填写的每一步\n  const componentWrap1 = useComponentWrap(\n    StepComponent1,\n    {\n      key: 'StepComponent1',\n      mealData,\n      formRef,\n      handleFormChange,\n    },\n    customSubFormValidator1,\n  );\n\n  const componentWrap2 = useComponentWrap(\n    StepComponent2,\n    {\n      key: 'StepComponent2',\n      mealData,\n      formRef,\n      handleFormChange,\n    },\n    customSubFormValidator2,\n  );\n\n  const componentWrap3 = useComponentWrap(\n    StepComponent3,\n    {\n      key: 'StepComponent3',\n      mealData,\n      formRef,\n      handleFormChange,\n    },\n    customSubFormValidator3,\n  );\n\n  const componentWrap4 = useComponentWrap(\n    StepComponent4,\n    {\n      key: 'StepComponent4',\n      formRef,\n    }\n  );\n\n  const tabPanels: StepTabPanel[] = [\n    componentWrap1.getNode(),\n    componentWrap2.getNode(),\n    componentWrap3.getNode(),\n    componentWrap4.getNode(),\n  ];\n\n  //  储存各组件的 componentWrap 状态\n  const componentWrapList = [\n    componentWrap1,\n    componentWrap2,\n    componentWrap3,\n    componentWrap4,\n  ];\n\n  // 执行当前子组件内的表单验证，返回值为验证后表单的 isvalid 状态\n  const validateSubForm = (index?: number) => {\n    const targetIndex = index == null ? currentStepIndex : index;\n    const targetComponentWrap = componentWrapList[targetIndex];\n    return targetComponentWrap.updateValidity(formRef.current);\n  }\n\n\n  // 点击下一步\n  const multiStepNextHandleRef = useRef<any>(null);\n  //  下一步\n  const handleNextStep = () => {\n    const isValid = validateSubForm();\n\n    if (isValid) {\n      //  调用子组件中的 next 方法\n      if (multiStepNextHandleRef.current == null) {\n        console.error('mutiStepTab组件为暴露对应的 next 引用');\n      }\n      multiStepNextHandleRef.current?.next();\n    } else {\n      setFormRef({current: formRef.current})\n    }\n  }\n\n  //  上一步\n  const handlePreviousStep = () => {\n    //  调用子组件中的 previous 方法\n    if (multiStepNextHandleRef.current == null) {\n      console.error('mutiStepTab组件为暴露对应的 next 引用');\n    }\n    multiStepNextHandleRef.current?.previous();\n  }\n\n  //  使用 useCallback 优化渲染\n  const handleTabChange = useCallback((index: number) => {\n    setCurrentStepIndex(index);\n  }, []);\n\n  //  判断是否允许切换 tab\n  const canSwitchTab = (index: number) => {\n    if (index < currentStepIndex) {\n      return true;\n    }\n\n    //  向前切换 tab 只能下一页，不允许跳过中间的表单直接切换（这会导致验证非常困难）\n    if (index > currentStepIndex + 1) {\n      return false;\n    }\n    //  验证当前页是否合法\n    let isValid = validateSubForm(currentStepIndex);\n    setFormRef(clone(formRef));\n\n    return isValid;\n  }\n\n  const handleSubmit = () => {\n    // todo: 提交表单\n    console.log('提交表单', formRef.current.value)\n  }\n\n\n  //  渲染动作按钮\n  const renderActionBtn = () => {\n    if (currentStepIndex === tabPanels.length - 1) {\n      return (\n        <Button className={style.actionBtn}\n                variant=\"contained\" fullWidth\n                onClick={handleSubmit}\n        >\n          Submit\n        </Button>\n      );\n    }\n\n    if (currentStepIndex === 0) {\n      return (\n        <Button className={style.actionBtn}\n                variant=\"contained\" fullWidth\n                onClick={handleNextStep}\n        >\n          Next\n        </Button>\n      );\n    }\n\n    //  同时显示上一页和下一页\n    return (\n      <div className={style.previousAndNextWrap}>\n        <Button variant=\"contained\"\n                color={'secondary'}\n                onClick={handlePreviousStep}\n        >\n          Previous\n        </Button>\n        <Button variant=\"contained\"\n                onClick={handleNextStep}\n        >\n          Next\n        </Button>\n      </div>\n    );\n\n  }\n\n  return (\n    <div className={style.selectMealFormContainer}>\n      <MutiStepTab tabBars={tabBars}\n                   tabPanels={tabPanels}\n                   nextHandleRef={multiStepNextHandleRef}\n                   canSwitchTab={canSwitchTab}\n                   onTabChange={handleTabChange}\n      />\n\n      {/* 动作按钮 */}\n      {renderActionBtn()}\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport SelectMealForm from \"./pages/select-meal-form/select-meal-form\";\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <SelectMealForm/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectMealFormContainer\":\"select-meal-form_selectMealFormContainer__FyWDr\",\"actionBtn\":\"select-meal-form_actionBtn__2qA9y\",\"previousAndNextWrap\":\"select-meal-form_previousAndNextWrap__1F1pr\",\"threeColumn\":\"select-meal-form_threeColumn__39Kxk\",\"deleteBtn\":\"select-meal-form_deleteBtn__1IOPx\",\"caption\":\"select-meal-form_caption__2kt8U\",\"addDishBtnWrap\":\"select-meal-form_addDishBtnWrap__3rJCA\",\"reviewContainer\":\"select-meal-form_reviewContainer__3L1fM\",\"reviewColumn\":\"select-meal-form_reviewColumn__2HuFI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tabBar\":\"muti-step-tab_tabBar__3cAgK\"};"],"sourceRoot":""}